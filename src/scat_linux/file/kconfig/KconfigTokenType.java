/* This file was automatically generated by genlex.sh
/* Do not edit!*/

package scat_linux.file.kconfig ;

import java.util.EnumMap ;
import java.util.Map ;

public enum KconfigTokenType {
  T_EOF,
  T_AND,
  T_BOOLEAN,
  T_CHOICE,
  T_CLOSE_PAREN,
  T_COMMENT,
  T_CONFIG,
  T_DEFAULT,
  T_DEF_BOOLEAN,
  T_DEF_TRISTATE,
  T_DEPENDS,
  T_ENDCHOICE,
  T_ENDIF,
  T_ENDMENU,
  T_EOL,
  T_EQUAL,
  T_HEX,
  T_IF,
  T_INT,
  T_MAINMENU,
  T_MENU,
  T_MENUCONFIG,
  T_NOT,
  T_OPEN_PAREN,
  T_OPTION,
  T_OPTIONAL,
  T_OR,
  T_PROMPT,
  T_RANGE,
  T_REQUIRES,
  T_SELECT,
  T_SOURCE,
  T_STRING,
  T_STRING_VAL,
  T_TRISTATE,
  T_UNEQUAL,
  T_VISIBLE_IF,
  T_ERROR;

  private final static Map<KconfigTokenType, Integer> ids =
      new EnumMap<>(KconfigTokenType.class);

  static {
    KconfigTokenType[] values = KconfigTokenType.values() ;
    for (int i = 0; i < values.length; i++) {
        ids.put(values[i], i);
    }
  }

  public static int toId(KconfigTokenType tokenType) {
    return ids.get(tokenType) ;
  }

  public static KconfigTokenType fromId(int v) {
    if (v >= KconfigTokenType.values().length)
        throw new RuntimeException("Incorrect value: " + v);

    return KconfigTokenType.values()[v];
  }
}